#!/usr/bin/env node

require('babel-register');

const webpack = require('webpack');
const nodemon = require('nodemon');
const fsx = require('fs-extra');
const cp = require('child_process');
const path = require('path');

const { locations } = require('../config');
const serverConfig = require('../config/webpack/server.babel').default;

const { NODE_ENV } = process.env;

const isDevelopment = NODE_ENV !== 'production';

if (isDevelopment) {
  console.log(`=> ðŸš§  Starting ${NODE_ENV} environment...`);
} else {
  console.log(`=> ðŸŒŽ  Starting ${NODE_ENV} environment...`);
}

const clean = () => {
  console.log('=> ðŸ—‘  Cleaning...');
  const cleanScript = path.resolve(locations.src, 'scripts', 'clean');
  cp.exec(cleanScript);
  console.log('=> ðŸ—‘  Cleaned');
};

const copyFavicon = () => {
  console.log('=> ðŸ”–  Copying favicon...');
  const src = path.resolve(locations.src, 'app', 'styles', 'assets', 'favicon.ico');
  const dest = path.resolve(locations.public, 'favicon.ico');
  fsx.copySync(src, dest);
  console.log('=> ðŸ”–  Copied');
};

const compileAndWatchServerBuild = () => {
  console.log('=> ðŸ”¨  Compiling server development build...');
  let initialCompile = true;
  return new Promise(resolve => {
    webpack(serverConfig).watch(null, (error, stats) => {
      if (error) return console.error(error);

      if (initialCompile) {
        initialCompile = false;
        console.log('=> ðŸ”¨  Server development build is compiled');
        return resolve();
      }

      return false;
    });
  });
};

const compileProductionBuilds = () => new Promise(resolve => {
  console.log('=> ðŸ”¨  Compiling production builds...');
  const buildScript = path.resolve(locations.src, 'scripts', 'build');

  cp
    .spawn(buildScript, [], { stdio: 'inherit' })
    .on('exit', () => {
      console.log('=> ðŸ”¨  Production builds are compiled');
      resolve();
    });
});

const runHotServer = () => new Promise(resolve => {
  console.log('=> ðŸ”¥  Starting HOT server...');
  const hotServer = path.resolve(locations.src, 'scripts', 'start.hot');

  cp
    .fork(hotServer)
    .on('message', () => {
      console.log('=> ðŸ”¥  Client development builds are compiled');
      resolve();
    });
});

const runAppServer = () => {
  console.log('=> ðŸš€  Starting WEB server...');

  const app = path.resolve(locations.serverBuild, 'app.js');
  const templates = path.resolve(locations.src, 'app', 'shell', 'server', 'templates');
  const manifest = path.resolve(locations.assets, 'modules.manifest.json');

  if (!fsx.existsSync(app)) {
    console.error(`ðŸš¨  Can't find app build at path: ${app}`);
    process.exit(1);
  }

  if (!fsx.existsSync(templates)) {
    console.error(`ðŸš¨  Can't find directory with server templates at path: ${templates}`);
    process.exit(1);
  }

  if (!fsx.existsSync(manifest)) {
    console.error(`ðŸš¨  Can't find modules manifest at path: ${manifest}`);
    process.exit(1);
  }

  nodemon({
    script: app,
    watch: [app, templates, manifest],
    ext: 'js json',
  });
};

const runDevelopment = async () => {
  await clean();
  await runHotServer();
  await copyFavicon();
  await compileAndWatchServerBuild();
  await runAppServer();
};

const runProduction = async () => {
  await clean();
  await compileProductionBuilds();
  await runAppServer();
};

isDevelopment ? runDevelopment() : runProduction();
